var AutoCompleteItemView = Backbone.View.extend({
    tagName: "li",

    events: {
        "click": "select"
    },
    
    initialize: function(options) {
        this.template= _.template($('#autocomplete_list').html()),
        this.options = options;
    },

    render: function () {
        this.$el.html(this.template({
            "label": this.model
        }));
        return this;
    },

    select: function (id) {
        this.options.parent.hide().select(this.model,id);
        return false;
    }

});

var AutoCompleteView = Backbone.View.extend({
    tagName: "ul",
    className: "autocomplete",
    wait: 300,

    queryParameter: "query",
    minKeywordLength: 1,
    currentText: "",
    itemView: AutoCompleteItemView,

    initialize: function (options) {
        _.extend(this, options);
        this.filter = _.debounce(this.filter, this.wait);
    },

    render: function () {
        // disable the native auto complete functionality
        this.input.attr("autocomplete", "off");

        this.$el.width(this.input.outerWidth());


        this.input
            .keyup(_.bind(this.keyup, this))
            .keydown(_.bind(this.keydown, this))
            .after(this.$el);


	this.$el.css({"margin-left": "900px", "margin-top": "28px"});

        return this;
    },

    keydown: function (event) {
        if (event.keyCode == 38) return this.move(-1);
        if (event.keyCode == 40) return this.move(+1);
        if (event.keyCode == 13) return this.onEnter();
        if (event.keyCode == 27) return this.hide();
    },

    keyup: function () {
        var keyword = this.input.val();
        if (this.isChanged(keyword)) {
            if (this.isValid(keyword)) {
                this.filter(keyword);
            } else {
                this.hide()
            }
        }
    },

    filter: function (keyword) {
    	var keyword = keyword.toLowerCase();
        if (this.model.url) {

            var parameters = {};
            parameters[this.queryParameter] = keyword;

            this.model.fetch({
                success: function () {
                    this.loadResult(this.model.models, keyword);
                }.bind(this),
                data: parameters
            });

        } else {
            this.loadResult(this.model.filter(function (model) {
                return model.label().toLowerCase().indexOf(keyword) !== -1
            }), keyword);
        }
    },

    isValid: function (keyword) {
        return keyword.length > this.minKeywordLength
    },

    isChanged: function (keyword) {
        return this.currentText != keyword;
    },

    move: function (position) {
        var current = this.$el.children(".active"),
            siblings = this.$el.children(),
            index = current.index() + position;
        if (siblings.eq(index).length) {
            current.removeClass("active");
            siblings.eq(index).addClass("active");
        }
        return false;
    },

    onEnter: function () {
        this.$el.children(".active").click();
        return false;
    },

    loadResult: function (model, keyword) {
        this.currentText = keyword;
        this.show().reset();
        if (model.length) {
            _.forEach(model, this.addItem, this);
            this.show();
        } else {
            this.hide();
        }
    },

    addItem: function (model) {
 	var model1 = []
	var i = 0 
        if(model.get('headline').indexOf(this.currentText) > -1){
	  model1[i] = model.get('headline')
	  i = i+1
        }
	if(model.get('name').indexOf(this.currentText) > -1){
	  model1[i] = model.get('name')
	  i = i+1
        }

	if(model.get('description').indexOf(this.currentText) > -1){
	  model1[i] = model.get('description')
	  i = i +1
        }
	//model1 =$.extend({}, model1);
        this.$el.append(new this.itemView({
            model: model1,
            parent: this,
            test: this.currentText
        }).render().$el);
    },

    select: function (model,id) {
        var label = model;
	var t = id.target.id
	if (label.length >=2){
	   for(var i=0;i<label.length;i++){
	     if(t== label[i]){
	           this.input.val(label[i])}
	   }
	}
	else{
           this.input.val(label)
	}
        this.currentText = label;
        this.onSelect(model,id);
    },

    reset: function () {
        this.$el.empty();
        return this;
    },

    hide: function () {
        this.$el.hide();
        return this;
    },

    show: function () {
        this.$el.show();
        return this;
    },

    // callback definitions
    onSelect: function (model) {
	var label = model
	for(var i=0;i<label.length;i++){
	var searchList = this.model.filter(function(listing) {
    		return listing.get("name") == label[i] ||
        listing.get("headline") === label[i] ||
        listing.get("description") === label[i];
	})
	//var readyToGoList = this.model.where({'name': label[i], 'headline': label[i], 'description': label[i]});
	}
	console.log(searchList)
	collect = new BackbonerailsApp.Collections.Listings(searchList);
        var view = new Backgrid.Grid({columns: this.grid.columns, collection: collect})
	$('#container').html(view.render().$el)
    }

});

